Q1. why main code in elf/sandbox/tiny2.s is started from "_start;" ?
Q2. what is the detail meaning of align in ELF program-header like p_align ?
Q3. why ELF sample specified "org 0x08048000" instruction ?

A2.
p_alignについては
「p_offsetとp_vaddrをこの値で割った余りは等しい」
という説明をよく見かける。これは確かに結果としてはその通りなのだが、初学者に対
しての説明としては不十分であるように感じる。
本質的には名前の通りalignなので、その値の倍数で区切られた領域ずつ確保し、その
範囲に情報を入れることになると予想できる。
なので、仮に属性が異なり同一のページへ配置できない領域が隣り合わせになっている
場合、前の領域がalignで指定される値で割りきれる範囲までメモリを確保し、メモリ
領域をalignの値で整列させる。次の領域はその整列によってできる幾ばくかの空白ア
ドレスの先から開始し、指定されているoffset分を移動した箇所から開始される。

ex) リンカ・ローダ実戦開発テクニック P.52 より抜粋
Program Headers:
  Type  Offset      VirtAddr    PhysAddr    Filesize    Memsize Flg Align
  LOAD  0x000000    0x0848000   0x08048000  0x005e4     0x005e4 R W 0x1000  ...1
  LOAD  0x0005e4    0x80495e4   0x080495e4  0x000f0     0x0011c RW  0x1000  ...2

1の領域と2の領域はフラグの関係より同一ページには配置できない。
そして、alignは0x1000により、1の領域が0x08048000から始まりfilesize分使用した
0x080485e4で終了するものの、続けて2の領域は配置出来ない為にalign=0x1000で整列
出来る値分のメモリが確保される。つまり、0x08049000までが使用済み。
2の領域はここから開始され、Offsetの値を加味して 0x080495e4 より開始する。

※一応ちゃんとした処理を要確認


A3.
0x08048000の根拠はリンカスクリプトである /usr/lib64/ldscripts/elf_i386.x より、
実行ファイル中のオフセット0（＝先頭）がこの位置に展開される事になっているため。
つまり、ELFファイルがメモリ上へ読み込まれた際、この位置がELFの開始位置となる。
この値は64bit環境用のリンカスクリプトである、同ディレクトリの elf64_ia64.xでは
0x4000000000000000であり、32bit環境下とは異なる。
これらの指定はリンカを使用して実行可能ファイルを作成する際に使われるものなので、
今回、自作ELFファイルでは64bit環境なのに0x08048000でも動作したのは、特別この値
がその値でなくてはならないものではなく、リンカにより決められる値というだけの
モノであるため。
